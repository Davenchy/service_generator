#!/usr/bin/env bash
# This script will generate a systemd service file
# Dracula Theme is used: https://draculatheme.com/

# Globals
SYSD="/usr/lib/systemd/system/"

# reset terminal
reset

# Color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
WHITE='\033[0;37m'
NC='\033[0m' # No Color

# define display and write functions

# Function to display an error message and exit
display_error() {
    echo -e "${RED}Error: $1${NC}"
    [ -z "$2" ] && exit 1
}

# Function to display a success message
display_success() {
    echo -e "${GREEN}Success:${WHITE} $1${NC}"
}

# Function to display a warning message
display_warning() {
		echo -e "${YELLOW}WARNING:${WHITE} $1${NC}"
}

# Function to display an info message
display_info() {
		echo -e "${BLUE}INFO:${WHITE} $1${NC}"
}

# check required tools are installed
required_tools=("fzf" "tput" "getent" "vim")
for tool in "${required_tools[@]}"; do
    [ -z "$(command -v "$tool")" ] \
        && display_error "$tool is not installed, please install it."
done

# color function to define color with fallback values
# check below defined colors for more examples
color() {
	local color_ansi="$1"
	local color_8bit="$2"
	local color_24bit="$3"
	local code="\e[3"

	if [ "$(tput colors)" -eq 8 ]; then
		echo -ne "${code}8;5;${color_8bit}m"
	elif [ "$(tput colors)" -eq 256 ]; then
		echo -ne "${code}8;2;${color_24bit}m"
	else
		local color=7 # white by default
		case "$color_ansi" in
			black) color=0 ;;
			red) color=1 ;;
			green) color=2 ;;
			yellow) color=3 ;;
			blue) color=4 ;;
			magenta) color=5 ;;
			cyan) color=6 ;;
			white) color=7 ;;
		esac
		echo -ne "${code}${color}m"
	fi
}

# convert hex color to decimal so it can be used
# Example: color_hex2dec 0xff 0x00 0x00 -> 255;0;0
color_hex2dec() {
	printf "%d;%d;%d" "$1" "$2" "$3"
}

# Redfine colors to use Dracula Theme and the fallback colors if not supported
# https://draculatheme.com
RED="$(color red 196 "$(color_hex2dec 0xEA 0x51 0xB2)")"
GREEN="$(color green 83 "$(color_hex2dec 0x00 0xF7 0x69)")"
YELLOW="$(color yellow 227 "$(color_hex2dec 0xEB 0xFF 0x87)")"
BLUE="$(color blue 111 "$(color_hex2dec 0x62 0xD6 0xE8)")"
MAGENTA="$(color magenta 200 "$(color_hex2dec 0xB4 0x5B 0xCF)")"
CYAN="$(color cyan 45 "$(color_hex2dec 0xA1 0xEF 0xE4)")"
WHITE="$(color white 231 "$(color_hex2dec 0xE9 0xE9 0xF4)")"
NC="$(echo -en '\e[0m')"
RESET="$(echo -en '\e[0m')"

# FZF default confiuration
export FZF_DEFAULT_OPTS='--color=fg:#f8f8f2,bg:#282a36,hl:#bd93f9 --color=fg+:#f8f8f2,bg+:#44475a,hl+:#bd93f9 --color=info:#ffb86c,prompt:#50fa7b,pointer:#ff79c6 --color=marker:#ff79c6,spinner:#ffb86c,header:#6272a4 --cycle --marker=x --height=50%'

# Action Scripts

function EditService {
    local service_path="$1"
    local service_file
    service_file="$(basename "$service_path")"
    local service_name=${service_file%.service}

    echo "EditService"
}

function ShowControlServiceHelp {
    echo -e ""
}

function ControlService {
    local service_path="$1"
    local service_file
    service_file="$(basename "$service_path")"
    local service_name=${service_file%.service}

    local options=("Status" "Start" "Stop" "Restart" "Enable" "Disable" "Print"
        "Logs" "Follow Logs" "Edit" "Help" "Editor" "Remove"
        "Create Service" "Select Service" "Back" "Exit")

    # show service status
    systemctl status "$service_file" | head -n 3

    echo -e "${BLUE}"
    select option in "${options[@]}"; do
        echo -en "${RESET}"
        case "$option" in
            "Help") ShowControlServiceHelp;;
            "Start") sudo systemctl start "$service_file";;
            "Restart") sudo systemctl restart "$service_file";;
            "Stop") sudo systemctl stop "$service_file";;
            "Enable") sudo systemctl enable "$service_file";;
            "Disable") sudo systemctl disable "$service_file";;
            "Status") systemctl status "$service_file";;
            "Logs") journalctl -u "$service_file";;
            "Follow Logs") journalctl -u "$service_file" -f;;
            "Print") systemctl cat "$service_file";;
            "Editor") sudo bash -c "$EDITOR $service_path";;
            "Edit") EditService "$1";;
            "Remove")
                sudo systemctl stop "$service_file" > /dev/null 2>&1
                sudo systemctl disable "$service_file" > /dev/null 2>&1
                sudo rm "$service_path" > /dev/null 2>&1
                sudo systemctl daemon-reload > /dev/null 2>&1
                display_success "Service Removed!"
                break;;
            "Create Service") CreateService;;
            "Select Service") SelectService;;
            "Back") break;;
            "Exit") exit 0;;
            *) display_error "Invalid Choice" 1;;
        esac
    done
}

function CreateService {
    display_info "Create a new service"

    # get service name
    while true; do
        read -p "${GREEN}Enter service name: ${YELLOW}" -r service_name
        local service_path="${SYSD}${service_name}.service"

        # if no service file exists with the same name then goto next step
        [ ! -f "$service_path" ] && break
        # display error and loop if service with the same name exists
        display_error "A service with the same name exists!" 1
    done

    # get service description
    read -p "${GREEN}Enter service description: ${YELLOW}" -r service_description

    local service_content="[Unit]
    Description=${service_description}
    "

    if sudo bash -c "echo '$service_content' > $service_path"; then
        display_success "Service file created at ${service_path}"
        ControlService "${service_path}"
    else
        display_error "Failed to write service file to $service_path, Exiting..."
    fi
}

function SelectService {
    local service=""

    # reload systemd services
    display_info "Reloading systemd daemons!"
    sudo systemctl daemon-reload
    # use fzf to select a service from filtered list
    service=$(systemctl list-unit-files --type=service \
        | awk '$1 ~ ".service" { print $1 }' \
        | fzf -e --header "Select Service" --prompt "Service: ")

    # check if a service was selected
    if [ -z "$service" ]; then
        display_error "Please select service!" 1
        return
    fi

    # get service file path
    service_path=$(systemctl show -p FragmentPath "$service" | cut -d'=' -f2 )

    # use the selected service file path to enter control mode
    ControlService "$service_path"
}

# Main Script

function main {
    PS3="${MAGENTA}Selected Action: ${YELLOW}"
    local actions=(
        "Create Service"
        "Select Service"
        "Exit"
    )

    echo -e "${GREEN}How can I help?${BLUE}"
    select action in "${actions[@]}"; do
        echo -e "${RESET}"
        case $action in
            "Create Service") CreateService;;
            "Select Service") SelectService;;
            "Exit") exit 0;;
            *) display_error "Invalid Choice" 1 ;;
        esac
    done
}

# Run main function
main "$@"
